name: Test and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: ðŸ§ª Run Tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install package in editable mode + test deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-django

      - name: Run pytest
        run: python3 -m pytest --maxfail=1 --disable-warnings -q
        
  release:
    name: ðŸš€ Release
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      id-token: write
      contents: write

    steps:
      # 1) SSH-Agent starten und Key laden
      - name: ðŸšª Start SSH-Agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}
      
      - name: Add GitHub to SSH known_hosts for container
        run: |
          mkdir -p $RUNNER_TEMP/_github_home/.ssh
          ssh-keyscan github.com >> $RUNNER_TEMP/_github_home/.ssh/known_hosts
      
      # 2) Checkout via SSH
      - name: Checkout Repository Ã¼ber SSH
        uses: actions/checkout@v4
        with:
          repository: TimKleindick/general_manager
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ github.ref }}  

      # 1) Semantic Release nur zum Bump & Taggen
      - id: semantic_release
        name: Semantic Version Release
        uses: python-semantic-release/python-semantic-release@v9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build: "false"
          git_committer_name:  "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      # 2) Build & Upload nur, wenn wirklich was released wurde
      - name: Build & Publish to PyPI
        if: ${{ steps.semantic_release.outputs.released == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          python -m build
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      # 3) Release-Assets nur im echten Release-Fall
      - name: Publish to GitHub Release Assets
        if: ${{ steps.semantic_release.outputs.released == 'true' }}
        uses: python-semantic-release/publish-action@v9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semantic_release.outputs.tag }}
