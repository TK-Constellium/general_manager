name: Test and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: ðŸ§ª Run Tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install package in editable mode + test deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-django

      - name: Run pytest
        run: python3 -m pytest --maxfail=1 --disable-warnings -q

  release:
    name: ðŸš€ Release
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      id-token: write
      contents: write

    steps:
      # 1) Checkout via SSH
      - name: Checkout Repository Ã¼ber SSH
        uses: actions/checkout@v4
        with:
          repository: TimKleindick/general_manager
          ssh-key: ${{ secrets.TEST_DEPLOY }}
          ssh-strict: false
          persist-credentials: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      # 2) Set the Remote Repository
      - id: configure_repository
        name: Set the GIT Origin Name and Email for use with SSH
        run: |
          git remote set-url origin git@github.com:TimKleindick/general_manager.git
          git config --global user.name "github-actions"
          git config --global user.email "actions@users.noreply.github.com"

      - id: install_requirements
        name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release build build twine==6.0.1

      # 3) Push the Release to Github
      - id: semantic_release
        name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version

      - name: Get latest tag
        id: get_tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - id: semantic_changelog
        name: Semantic Changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release changelog --post-to-release-tag ${{ steps.get_tag.outputs.tag }}

      # 4) Build nur, wenn wirklich was released wurde
      - id: build
        if: ${{ steps.semantic_release.outputs.released == 'true' }}
        name: Build Project
        run: python -m build

#      # 5) Upload nur, wenn wirklich was released wurde
#      - name: Publish to PyPI
#        if: ${{ steps.semantic_release.outputs.released == 'true' }}
#        run: twine upload dist/*
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
